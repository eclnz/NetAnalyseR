// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// floydWarshallRcpp
arma::mat floydWarshallRcpp(const arma::mat& inputMatrix);
RcppExport SEXP _NetAnalyseR_floydWarshallRcpp(SEXP inputMatrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type inputMatrix(inputMatrixSEXP);
    rcpp_result_gen = Rcpp::wrap(floydWarshallRcpp(inputMatrix));
    return rcpp_result_gen;
END_RCPP
}
// calculateBetweennessCentrality
NumericVector calculateBetweennessCentrality(const NumericMatrix& D, const NumericMatrix& NP);
RcppExport SEXP _NetAnalyseR_calculateBetweennessCentrality(SEXP DSEXP, SEXP NPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type NP(NPSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateBetweennessCentrality(D, NP));
    return rcpp_result_gen;
END_RCPP
}
// dijkstraAllPairs
NumericMatrix dijkstraAllPairs(const NumericMatrix& matrix);
RcppExport SEXP _NetAnalyseR_dijkstraAllPairs(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(dijkstraAllPairs(matrix));
    return rcpp_result_gen;
END_RCPP
}
// rewireTwoNetworksCpp
List rewireTwoNetworksCpp(NumericMatrix originalMatrix, NumericMatrix secondaryMatrix, int initialIter);
RcppExport SEXP _NetAnalyseR_rewireTwoNetworksCpp(SEXP originalMatrixSEXP, SEXP secondaryMatrixSEXP, SEXP initialIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type originalMatrix(originalMatrixSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type secondaryMatrix(secondaryMatrixSEXP);
    Rcpp::traits::input_parameter< int >::type initialIter(initialIterSEXP);
    rcpp_result_gen = Rcpp::wrap(rewireTwoNetworksCpp(originalMatrix, secondaryMatrix, initialIter));
    return rcpp_result_gen;
END_RCPP
}
// localClusteringCoefficientWei
arma::vec localClusteringCoefficientWei(const arma::mat& W_original);
RcppExport SEXP _NetAnalyseR_localClusteringCoefficientWei(SEXP W_originalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type W_original(W_originalSEXP);
    rcpp_result_gen = Rcpp::wrap(localClusteringCoefficientWei(W_original));
    return rcpp_result_gen;
END_RCPP
}
// localEfficiencyWei
arma::vec localEfficiencyWei(const arma::mat& W_original);
RcppExport SEXP _NetAnalyseR_localEfficiencyWei(SEXP W_originalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type W_original(W_originalSEXP);
    rcpp_result_gen = Rcpp::wrap(localEfficiencyWei(W_original));
    return rcpp_result_gen;
END_RCPP
}
// rewireNetworkCpp
NumericMatrix rewireNetworkCpp(NumericMatrix R, int initialIter);
RcppExport SEXP _NetAnalyseR_rewireNetworkCpp(SEXP RSEXP, SEXP initialIterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type initialIter(initialIterSEXP);
    rcpp_result_gen = Rcpp::wrap(rewireNetworkCpp(R, initialIter));
    return rcpp_result_gen;
END_RCPP
}
// generateRewiredMatrices
std::vector<NumericMatrix> generateRewiredMatrices(NumericMatrix initialMatrix, int n);
RcppExport SEXP _NetAnalyseR_generateRewiredMatrices(SEXP initialMatrixSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type initialMatrix(initialMatrixSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(generateRewiredMatrices(initialMatrix, n));
    return rcpp_result_gen;
END_RCPP
}
// richClubCoefficient
NumericVector richClubCoefficient(NumericMatrix W, IntegerVector NodeDegree, int klevel, int NofNodes);
RcppExport SEXP _NetAnalyseR_richClubCoefficient(SEXP WSEXP, SEXP NodeDegreeSEXP, SEXP klevelSEXP, SEXP NofNodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type NodeDegree(NodeDegreeSEXP);
    Rcpp::traits::input_parameter< int >::type klevel(klevelSEXP);
    Rcpp::traits::input_parameter< int >::type NofNodes(NofNodesSEXP);
    rcpp_result_gen = Rcpp::wrap(richClubCoefficient(W, NodeDegree, klevel, NofNodes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NetAnalyseR_floydWarshallRcpp", (DL_FUNC) &_NetAnalyseR_floydWarshallRcpp, 1},
    {"_NetAnalyseR_calculateBetweennessCentrality", (DL_FUNC) &_NetAnalyseR_calculateBetweennessCentrality, 2},
    {"_NetAnalyseR_dijkstraAllPairs", (DL_FUNC) &_NetAnalyseR_dijkstraAllPairs, 1},
    {"_NetAnalyseR_rewireTwoNetworksCpp", (DL_FUNC) &_NetAnalyseR_rewireTwoNetworksCpp, 3},
    {"_NetAnalyseR_localClusteringCoefficientWei", (DL_FUNC) &_NetAnalyseR_localClusteringCoefficientWei, 1},
    {"_NetAnalyseR_localEfficiencyWei", (DL_FUNC) &_NetAnalyseR_localEfficiencyWei, 1},
    {"_NetAnalyseR_rewireNetworkCpp", (DL_FUNC) &_NetAnalyseR_rewireNetworkCpp, 2},
    {"_NetAnalyseR_generateRewiredMatrices", (DL_FUNC) &_NetAnalyseR_generateRewiredMatrices, 2},
    {"_NetAnalyseR_richClubCoefficient", (DL_FUNC) &_NetAnalyseR_richClubCoefficient, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_NetAnalyseR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
